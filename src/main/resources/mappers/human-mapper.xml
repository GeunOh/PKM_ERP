<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="humanMapper">
	
	<resultMap type="Human" id="humanResult">
		<id column="ENO" property="eno"/>
		<result column="PWD" property="pwd"/>
		<result column="ENAME" property="name"/>
		<result column="EBIRTHDAY" property="birthday"/>
		<result column="EADDRESS" property="address"/>
		<result column="EEMAIL" property="email"/>
		<result column="EPHONE" property="phone"/>
		<result column="INDATE" property="indate"/>
		<result column="OUTDATE" property="outdate"/>
		<result column="OUTYN" property="outyn"/>
		<result column="RCODE" property="rcode"/>
		<result column="RNAME" property="rname"/>
		<result column="DCODE" property="dcode"/>
		<result column="DNAME" property="dname"/>
		<result column="ORIGINALNAME_FILE" property="originalFileName"/>
		<result column="RENAME_FILE" property="renameFileName"/>
	</resultMap>
	
	<resultMap type="Department" id="deptResult">
		<id column="DCODE" property="dcode"/>
		<result column="DNAME" property="dname"/>
		<result column="DCOMMENT" property="dcomment"/>
		<result column="DBOSS" property="dboss"/>
		<result column="STARTDATE" property="startDate"/>
	</resultMap>
	
	<resultMap type="Rank" id="rankResult">
		<id column="RCODE" property="rcode"/>
		<result column="RNAME" property="rname"/>
	</resultMap>
	
	<resultMap type="Vacation" id="vacationResult">
		<id column="VNO" property="vno" />
		<result column="ENO" property="eno"/>
		<result column="VTYPE" property="vType"/>
		<result column="STARTDATE" property="startDate"/>
		<result column="ENDDATE" property="endDate"/>
		<result column="REASON" property="reason"/>
		<result column="REQUESTDATE" property="requestDate"/>
		<result column="STATUS" property="status"/>
		<result column="USEDAY" property="useDay"/>
		<result column="DNAME" property="dname"/>
		<result column="RNAME" property="rname"/>
	</resultMap>

	<resultMap type="WorkTime" id="worktimeResult">
		<id column="ENO" property="eno"/>
		<result column="ENAME" property="name"/>
		<result column="RNAME" property="rname"/>
		<result column="DNAME" property="dname"/>
		<result column="HIRDATE" property="date"/>
		<result column="INTIME" property="intime"/>
		<result column="OUTTIME" property="outtime"/>
		<result column="WORK_TYPE" property="type"/>
	</resultMap>
	
	<resultMap type="Salary" id="salaryResult">
		<id column="ENO" property="eno"/>
		<result column="DNAME" property="dname"/>
		<result column="RNAME" property="rname"/>
		<result column="ENAME" property="ename"/>
		<result column="INDATE" property="indate"/>
		<result column="SALARY" property="salary"/>
	</resultMap>

	<resultMap type="PeopleCount" id="peopleCountResult">
		<result column="peopleAll" property="peopleAll"/>
		<result column="peopleIn" property="peopleIn"/>
		<result column="peopleOut" property="peopleOut"/>
	</resultMap>
	
	<select id="HumanListCount" resultType="_int">
		SELECT COUNT(*) FROM TB_USER
	</select>
	
	<select id="HumanList" resultMap="humanResult">
		SELECT ENO, PWD, ENAME, EBIRTHDAY, EADDRESS, EEMAIL, EPHONE, INDATE, OUTDATE, OUTYN, RNAME, DNAME FROM HUMANLIST
		<if test="order != '' and order != null">
			<if test="order == 'DESC'">ORDER BY INDATE DESC</if>
			<if test="order == 'ASC'">ORDER BY INDATE ASC</if>
		</if>
	</select>
	
	<!-- 부서 목록 조회 -->
	<select id="selectDepartmentList" resultMap="deptResult">
		SELECT * FROM TB_DEPT
	</select>
	
	<!-- 부서 조회 -->
	<select id="selectDepartment" resultType="Department">
		SELECT * FROM ONEDEPT
		<where>
			DNAME=#{DEPTNAME}
		</where>
	</select>
	
	<select id="SearchHumanListCount" resultType="_int">
		SELECT COUNT(*) FROM HUMANLIST
		<where>
			<if test="so.all != null"></if>
			<if test="so.inUser != null">AND OUTYN = 'N'</if>
			<if test="so.outUser != null">AND OUTYN = 'Y'</if>
			<if test="so.dateAll != null"></if>
			<if test="so.dateSelect != null">AND INDATE BETWEEN #{date} AND #{date2} </if>
			<if test="dept != null and dept != ''">AND DCODE = #{dept}</if>
			<if test="rank != null and rank != ''">AND RCODE = #{rank}</if>
			<if test="email != null and email != ''">AND EEMAIL = #{email}</if>
			<if test="eno != null and eno != ''">AND  ENO = #{eno}</if>
			<if test="name != null and name != ''">AND  ENAME = #{name}</if>
		</where>
	</select>
	
	<select id="SearchHumanList" resultMap="humanResult">
		SELECT ENO, PWD, ENAME, EBIRTHDAY, EADDRESS, EEMAIL, EPHONE, INDATE, OUTDATE, OUTYN, RNAME, DNAME FROM HUMANLIST
		<where>
			<if test="so.all != null"></if>
			<if test="so.inUser != null">AND OUTYN = 'N'</if>
			<if test="so.outUser != null">AND OUTYN = 'Y'</if>
			<if test="so.dateAll != null"></if>
			<if test="so.dateSelect != null ">AND INDATE BETWEEN #{date} AND #{date2} </if>
			<if test="dept != null and dept != ''">AND DCODE = #{dept}</if>
			<if test="rank != null and rank != ''">AND RCODE = #{rank}</if>
			<if test="email != null and email != ''">AND EEMAIL = #{email}</if>
			<if test="eno != null and eno != ''">AND  ENO = #{eno}</if>
			<if test="name != null and name != ''">AND  ENAME = #{name}</if>
		</where>
	</select>
	
	<select id="selectPositionCount" resultType="_int">
		SELECT COUNT(*) FROM TB_USER WHERE OUTYN = 'N'
		<if test="name != null or name != ''">AND ename=#{name}</if>
	</select>
	
	<!-- 직급 검색 -->
	<select id="searchPosition" resultMap="rankResult">
		SELECT * FROM TB_RANK
		<where>
			<if test="rcode != null and rcode != ''">AND rcode=#{rcode}</if>
			<if test="rname != null and rname != ''">AND rname=#{rname}</if>
		</where>
	</select>
	
	<select id="postionListCount" resultType="_int">
		SELECT COUNT(*) FROM TB_USER WHERE OUTYN = 'N'
	</select>
	
	<!-- 직급 목록 -->
	<select id="positionList" resultMap="rankResult">
		SELECT * FROM TB_RANK
	</select>
	
	<!-- 직급 등록 -->
	<insert id="addPosition">
		INSERT INTO TB_RANK VALUES(#{rcode},#{rname})
	</insert>
	
	<!-- 직급 선택 시 사원목록 조회(재직중인 사원만) -->
	<select id="choiceRcode" resultMap="humanResult">
		SELECT U.ENO, U.ENAME, R.RNAME RCODE, D.DNAME DCODE
		FROM TB_USER U
		JOIN TB_RANK R ON(U.RCODE=R.RCODE)
		LEFT JOIN TB_DEPT D USING(DCODE)
		WHERE
		OUTYN = 'N'
		AND U.RCODE=#{rcode}
	</select>
	
	<delete id="deletePosition">
		DELETE FROM TB_RANK WHERE RCODE IN
		<foreach collection="array" open="(" close=")" separator="," item="rcode">
			#{rcode}
		</foreach>
	</delete>
	
	<!-- 부서 등록 -->
	<insert id="addDept" parameterType="Department">
		INSERT INTO tb_dept values(#{dcode}, #{dname}, #{dcomment}, (SELECT eno FROM tb_user WHERE ename=#{eno}), SYSDATE)
	</insert>
	
	<!-- 부서 삭제 -->
	<delete id="delDept">
		DELETE FROM TB_DEPT WHERE DNAME IN
		<foreach collection="array" open="(" close=")" separator="," item="dname">
			#{dname}
		</foreach>
	</delete>
	
	<!-- 부서 수정 -->
	<update id="modifyDept">
		UPDATE TB_DEPT 
		SET DCODE=#{dcode}, DCOMMENT=#{dcomment}, DNAME=#{dname}, STARTDATE=#{startDate}, 
			ENO=(SELECT ENO FROM tb_user WHERE ENAME=#{eno}) 
		WHERE DNAME=#{beforeDeptName}
	</update>
	
	<insert id="humanInsert">
		INSERT INTO TB_USER VALUES(#{h.eno},#{h.pwd},#{h.name},#{birthDay},#{h.address},#{h.email},#{h.phone},#{h.gender},#{inDate},null,'N',#{h.rcode},#{h.dcode},#{h.originalFileName},#{h.renameFileName},'N')	
	</insert>	
	
	<select id="enoDupChk" resultType="_int">
		SELECT COUNT(*) FROM TB_USER WHERE ENO = #{eno}
	</select>
	
	<select id="humanAddDeptList" resultMap="deptResult">
	 	SELECT DCODE, DNAME FROM TB_DEPT
	</select>
	
	<select id="humanAddRankList" resultMap="rankResult">
	 	SELECT * FROM TB_RANK
	</select>
	
	<select id="Login" resultMap="humanResult">
		SELECT * FROM SOLOUSER WHERE ENO = #{id} AND OUTYN = 'N'
	</select>
	
	<!-- 부서 중복되는지 조회  -->
	<select id="dcodeDupChk" resultType="_int">
		SELECT COUNT(*) FROM TB_DEPT WHERE dcode = #{dcode}
	</select>
	
	<!-- 휴가 신청 목록 조회  -->
	<select id="vacationList" resultMap="vacationResult">
		SELECT VNO, ENAME ENO, VTYPE, STARTDATE, ENDDATE, USEDAY,
			   REASON, REQUESTDATE, STATUS, DNAME, RNAME 
		FROM VACATIONLIST
	</select>
	
	<!-- 휴가 신청 승인 -->
	<update id="approvalVacation">
		UPDATE TB_VACATION_RECORD SET STATUS='Y' WHERE VNO IN
		<foreach collection="array" item="vno" open="(" close=")" separator=",">
			#{vno}
		</foreach>
	</update>
	
	<!-- 휴가 신청 거절 -->
	<update id="refuseVacation">
		UPDATE TB_VACATION_RECORD SET STATUS='F' WHERE VNO IN
		<foreach collection="array" item="vno" open="(" close=")" separator=",">
			#{vno}
		</foreach>
	</update>
	
	<!-- 휴가 신청 목록 검색 -->
	<select id="searchVacationList" resultMap="vacationResult">
		SELECT VNO, ENAME ENO, VTYPE, STARTDATE, ENDDATE, USEDAY,
			   REASON, REQUESTDATE, STATUS, DNAME, RNAME 
		FROM VACATIONLIST
		<where>
			<if test="so.all != null"></if>
			<if test="so.wait != null">AND STATUS = 'N'</if>
			<if test="so.ok != null">AND STATUS = 'Y'</if>
			<if test="so.no != null">AND STATUS = 'F'</if>
			<if test="so.dateAll != null"></if>
			<if test="so.dateRequest != null">AND REQUESTDATE BETWEEN #{date} AND #{date2}</if>
			<if test="so.dateStart != null">AND STARTDATE BETWEEN #{date} AND #{date2}</if>
			<if test="so.dateEnd != null">AND ENDDATE BETWEEN #{date} AND #{date2}</if>
			<if test="selectDept != ''">AND DCODE=#{selectDept}</if>
			<if test="selectRank != ''">AND RCODE=#{selectRank}</if>
			<if test="name != ''">AND ENAME=#{name}</if>
		</where>
	</select>
	
	<!-- 휴가 신청 목록 전체 행 개수  -->
	<select id="vacationListCount" resultType="_int">
		SELECT COUNT(*) FROM TB_VACATION_RECORD
	</select>
	
	<!-- 휴가 신청 목록 검색 결과 행 개수  -->
	<select id="searchVacationListCount" resultType="_int">
		SELECT COUNT(*) FROM VACATIONLIST
		<where>
			<if test="so.dateAll != null"></if>
			<if test="so.dateSelect != null">AND REQUESTDATE BETWEEN #{date} AND #{date2}</if>
			<if test="selectDept != ''">AND DCODE=#{selectDept}</if>
			<if test="selectRank != ''">AND RCODE=#{selectRank}</if>
			<if test="eno != ''">AND ENO=#{eno}</if>
			<if test="name != ''">AND ENAME=#{name}</if>
		</where>
	</select>
	
	<select id="humanModifyInfo" resultMap="humanResult">
		SELECT * FROM SOLOUSER WHERE ENO = #{eno}
	</select>
		
   	<!-- 휴가 신청 -->
	<insert id="addVacation" parameterType="Vacation">
		INSERT INTO TB_VACATION_RECORD VALUES
		(TB_VACATION_VNO.nextval, #{eno}, #{vType}, #{startDate}, #{endDate}, #{useDay}, 
		<if test="reason != ''">#{reason}, SYSDATE, DEFAULT)</if>
		<if test="reason == ''">NULL, SYSDATE, DEFAULT)</if>
	</insert>
	
	<!-- 휴가 잔여일수 확인 -->
	<select id="showVacationDays" resultType="_int">
		SELECT USEDAY FROM TB_VACATION WHERE ENO=#{eno}
	</select>
	
	<!-- 부서 클릭시 해당 사원목록 조회 -->
	<select id="departStudentShow" resultMap="humanResult">
		SELECT DNAME, RCODE,RNAME, ENO, ENAME
		FROM HUMANLIST WHERE DNAME = #{deptName}
	</select>
	
	<!-- 직급 중복 체크-->
	<select id="rcodeDupChk" resultType="_int">
		SELECT COUNT(*) FROM TB_RANK WHERE RCODE = #{rcode}
	</select>
	
	<insert id="WorkTimeIn">
		INSERT INTO TB_WORKINOUT VALUES(#{eno}, sysdate, sysdate, null, #{type})
	</insert>	
		
	<!-- 변경할 직급 정보 조회 -->
	<select id="positonModifyInfo" resultType="Rank">
		SELECT * FROM TB_RANK WHERE RCODE = #{rcode}
	</select>
	
	<update id="modifyPositon">
		UPDATE TB_RANK SET RCODE=#{rcode}, RNAME=#{rname} WHERE RCODE=#{beforeRcode}
	</update>
	
	<select id="workList" resultMap="worktimeResult">
		SELECT W.*
		FROM WORKLIST W
			 JOIN TB_USER U ON(W.ENO=U.ENO)
			 JOIN TB_DEPT D ON (D.DCODE=U.DCODE)
			 JOIN TB_RANK R ON (R.RCODE=U.RCODE)
		WHERE TO_CHAR(TO_DATE(W.HIRDATE),'YYYY-MM')= TO_CHAR(TRUNC(SYSDATE, 'mm'), 'YYYY-MM')
		ORDER BY W.ENO, W.HIRDATE
	</select>
	
	<select id="enoWorkList" resultMap="worktimeResult">
		SELECT U.ENAME, D.DNAME, R.RNAME
		FROM (SELECT DISTINCT ENO, TO_CHAR(to_date(HIRDATE), 'YYYY-MM') HIRDATE FROM WORKLIST) W
			 JOIN TB_USER U ON(W.ENO=U.ENO)
			 JOIN TB_DEPT D ON (D.DCODE=U.DCODE)
			 JOIN TB_RANK R ON (R.RCODE=U.RCODE)
		WHERE W.HIRDATE= TO_CHAR(TRUNC(SYSDATE, 'mm'), 'YYYY-MM')
		ORDER BY W.ENO
	</select>
	
	<!-- 급여 관리 목록 -->
	<select id="salaryList" resultMap="salaryResult">
		SELECT * FROM SALARYLIST
	</select>
	
	<!-- 급여 관리 목록 행 개수 -->
	<select id="salaryListCount" resultType="_int">
		SELECT COUNT(*) FROM TB_SALARY
	</select>
	
	<select id="workListCount" resultType="_int">
		SELECT COUNT(*) FROM WORKLIST
	</select>
	
	<select id="SearchWorkCount" resultType="_int">
		SELECT COUNT(*)
		FROM WORKLIST W
			 JOIN TB_USER U ON(W.ENO=U.ENO)
			 JOIN TB_DEPT D ON (D.DCODE=U.DCODE)
			 JOIN TB_RANK R ON (R.RCODE=U.RCODE)
		<where>
			<if test="so.all != null"></if>
			<if test="so.inUser != null">AND OUTYN = 'N'</if>
			<if test="so.outUser != null">AND OUTYN = 'Y'</if>
			<if test="so.dateAll != null"></if>
			<if test="so.dateSelect != null ">AND TO_CHAR(TO_DATE(HIRDATE), 'YYYY-MM') = #{date}</if>
			<if test="dept != null and dept != ''">AND D.DCODE = #{dept}</if>
			<if test="rank != null and rank != ''">AND R.RCODE = #{rank}</if>
			<if test="eno != null and eno != ''">AND  W.ENO = #{eno}</if>
			<if test="name != null and name != ''">AND  ENAME = #{name}</if>
		</where>
	</select>
	
	<select id="SearchWorkList" resultMap="worktimeResult">
		SELECT W.*
		FROM WORKLIST W
			 JOIN TB_USER U ON(W.ENO=U.ENO)
			 JOIN TB_DEPT D ON (D.DCODE=U.DCODE)
			 JOIN TB_RANK R ON (R.RCODE=U.RCODE)
		<where>
			<if test="so.all != null"></if>
			<if test="so.inUser != null">AND OUTYN = 'N'</if>
			<if test="so.outUser != null">AND OUTYN = 'Y'</if>
			<if test="so.dateAll != null"></if>
			<if test="so.dateSelect != null ">AND TO_CHAR(TO_DATE(HIRDATE), 'YYYY-MM') = #{date}</if>
			<if test="dept != null and dept != ''">AND D.DCODE = #{dept}</if>
			<if test="rank != null and rank != ''">AND R.RCODE = #{rank}</if>
			<if test="eno != null and eno != ''">AND  W.ENO = #{eno}</if>
			<if test="name != null and name != ''">AND  ENAME = #{name}</if>
		</where>
		ORDER BY W.ENO, W.HIRDATE
	</select>
	
	<select id="SearchWorkEnoList" resultMap="worktimeResult">
		SELECT U.ENAME, D.DNAME, R.RNAME
		FROM (SELECT DISTINCT ENO, TO_CHAR(TO_DATE(HIRDATE), 'YYYY-MM') HIRDATE FROM WORKLIST) W
			 JOIN TB_USER U ON(W.ENO=U.ENO)
			 JOIN TB_DEPT D ON (D.DCODE=U.DCODE)
			 JOIN TB_RANK R ON (R.RCODE=U.RCODE)
		<where>
			<if test="so.all != null"></if>
			<if test="so.inUser != null">AND OUTYN = 'N'</if>
			<if test="so.outUser != null">AND OUTYN = 'Y'</if>
			<if test="so.dateAll != null"></if>
			<if test="so.dateSelect != null ">AND HIRDATE = #{date}</if>
			<if test="dept != null and dept != ''">AND D.DCODE = #{dept}</if>
			<if test="rank != null and rank != ''">AND R.RCODE = #{rank}</if>
			<if test="eno != null and eno != ''">AND  W.ENO = #{eno}</if>
			<if test="name != null and name != ''">AND  ENAME = #{name}</if>
		</where>
		ORDER BY W.ENO
	</select>
	
	<select id="WorkPeopleCount" resultMap="peopleCountResult">
		SELECT COUNT(OUTYN) peopleAll,
		       COUNT(CASE WHEN OUTYN = 'N' THEN 1 END) peopleIn,
		       COUNT(CASE WHEN OUTYN = 'Y' THEN 1 END) peopleOut
       
		FROM (SELECT DISTINCT ENO, TO_CHAR(TO_DATE(HIRDATE), 'YYYY-MM') HIRDATE FROM WORKLIST) W
		         JOIN TB_USER U ON(W.ENO=U.ENO)
		         JOIN TB_DEPT D ON (D.DCODE=U.DCODE)
		         JOIN TB_RANK R ON (R.RCODE=U.RCODE)
		WHERE W.HIRDATE= TO_CHAR(TRUNC(SYSDATE, 'mm'), 'YYYY-MM')
		ORDER BY W.ENO
	</select>
	
	<select id="WorkSysdate" resultMap="worktimeResult">
		SELECT TO_CHAR(WORKIN_DATE,'HH24:MI') INTIME, TO_CHAR(WORKOUT_TIME,'HH24:MI') OUTTIME, WORK_TYPE FROM TB_WORKINOUT
		WHERE ENO = #{eno} AND TO_CHAR(WORKIN_DATE,'YYYY-MM-DD') = TO_CHAR(SYSDATE,'YYYY-MM-DD')
	</select>
	
	<update id="WorkTimeOut">
		UPDATE TB_WORKINOUT SET WORKOUT_TIME = SYSDATE WHERE ENO = #{eno} AND TO_CHAR(WORKIN_DATE,'YYYY-MM-DD') = TO_CHAR(SYSDATE,'YYYY-MM-DD')
	</update>
	
	<update id="HumanManagerModify">
		UPDATE TB_USER SET RCODE = #{rank}, DCODE = #{dept} WHERE ENO = #{eno}
	</update>
	<update id="HumanManagerDelete">
		UPDATE TB_USER SET OUTYN = 'Y' WHERE ENO = #{eno}
	</update>
</mapper>
